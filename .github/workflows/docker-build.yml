name: Universal Mihomo Build

on:
  #push:
  #  branches:
  #    - main
  #pull_request:
  #  branches:
  #    - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_platform: [linux/amd64, linux/arm64, linux/arm/v7]
        include:
          - target_platform: linux/amd64
            arch: amd64
          - target_platform: linux/arm64
            arch: arm64
          - target_platform: linux/arm/v7
            arch: armv7

    steps:
    - name: 检出代码
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
      env:
        DEBUG: true

    - name: 设置 QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all
      env:
        DEBUG: true

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host
      env:
        DEBUG: true

    - name: 登录 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      env:
        DEBUG: true

    - name: 获取最新版本信息
      id: get_release
      run: |
        echo -e "\033[33m[调试] 正在从 MetaCubeX/mihomo 获取最新版本...\033[0m"
        API_URL="https://api.github.com/repos/MetaCubeX/mihomo/releases/latest"
        AUTH_HEADER="Authorization: token $GITHUB_TOKEN"
        RESPONSE=$(curl -sSL -H "$AUTH_HEADER" "$API_URL")
        
        echo -e "\033[33m[调试] 原始 API 响应（已保存至 /tmp/api_response.json）\033[0m"
        echo "$RESPONSE" | tee /tmp/api_response.json
        
        # 解析下载链接（匹配包含版本号的文件名）
        ASSET_PATTERN="mihomo-linux-${{ matrix.arch }}-v[0-9]+\.[0-9]+\.[0-9]+\.gz"
        DOWNLOAD_URL=$(echo "$RESPONSE" | \
            jq -r --arg pattern "$ASSET_PATTERN" '.assets[] | select(.name | test($pattern)) | .browser_download_url')
        
        if [ -z "$DOWNLOAD_URL" ]; then
          echo -e "\033[31m[错误] 未找到对应架构的资产：$ASSET_PATTERN\033[0m"
          exit 1
        fi
        
        echo -e "\033[32m[调试] 下载链接解析成功：$ASSET_PATTERN => $DOWNLOAD_URL\033[0m"
        echo "::set-output name=download_url::$DOWNLOAD_URL"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEBUG: true

    - name: 创建目标目录
      run: |
        echo -e "\033[33m[调试] 创建目标目录 /etc/mihomo...\033[0m"
        sudo mkdir -p /etc/mihomo
        sudo chmod 755 /etc/mihomo

    - name: 下载并解压 mihomo 二进制文件
      run: |
        sudo -i
        echo -e "\033[33m[调试] 正在下载 ${{ matrix.arch }} 架构的 mihomo.gz 文件...\033[0m"
        curl -L -o mihomo.gz "${{ steps.get_release.outputs.download_url }}"
        echo -e "\033[32m[调试] 解压并重命名二进制文件到 /etc/mihomo/mihomo...\033[0m"
        gunzip -f mihomo.gz
        mv mihomo /etc/mihomo/mihomo
        chmod +x /etc/mihomo/mihomo
        echo -e "\033[32m[调试] 二进制文件准备就绪：/etc/mihomo/mihomo\033[0m"
      env:
        DEBUG: true

    - name: 构建并推送镜像
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: ${{ matrix.target_platform }}
        push: true
        tags: |
          yourdockerhubusername/mihomo:${{ matrix.arch }}-latest
          yourdockerhubusername/mihomo:latest
        build-args: |
          ARCH=${{ matrix.arch }}
      env:
        DEBUG: true
